
#Annika

def s( dna ):
    dict = {'A' : 0, 'C' : 0, 'G' : 0, 'T' : 0}
    for letter in dict:
        dict[letter] += dna.upper().count(letter)
    return dict
    
#Rose 

def dna2rna(dna):
    rna = ''
    for char in dna:
        if char == 'A':
            rna += 'A'
        elif char == 'T':
            rna += 'U'
        elif char == 'G':
            rna += 'G'
        elif char == 'C':
            rna += 'C'
    return rna
    
#Annika

def reverse_complement(dna):
    comp = ''
    for symbol in dna:
        if symbol == 'A':
            comp = comp + 'T'
        elif symbol == 'T':
            comp = comp + 'A'
        elif symbol == 'C':
            comp = comp + 'G'
        elif symbol == 'G':
            comp = comp + 'C'
    return comp[::-1]

#Emmy

def mendels_law (hom, het, rec):
    # total calculation
    total = hom + het + rec
    def tot (x):
        sumt = 0
        for i in range(0,x):
            sumt += i
        return sumt
    n_total = tot(total)
    # aaaa calculation
    def aaaa (a):
        sumrec = 0
        for i in range(0,a):
            sumrec += i
        return sumrec
    calcaaaa = 1*aaaa(rec)
    # AaAa calculation
    def AaAa (b):
        sumhet = 0
        for i in range(0,b):
            sumhet += i
        return sumhet
    calcAaAa = .25*AaAa(het)
    # Aaaa calculation
    Aaaa = het*rec
    calcAaaa = .5*Aaaa
    # calculation
    n_rec = calcaaaa + calcAaAa + calcAaaa
    P = 1 - (n_rec/n_total)
    return P

# Rose

def fibonacci_rabbits(n, k):
    if n == 1:
        return 1
    if n == 2:
        return 1
    return fibonacci_rabbits((n-1), k) + k*(fibonacci_rabbits((n-2), k))
 
# Rose & Aryan

def gc_content(dna_list):
    highest = 0
    highest_percent = 0
    for index in range(0,len(dna_list)):
        count = 0 
        for char in dna_list[index]:
            if char == 'C' or char == 'G':
                count = count + 1
        percentage = 100*count / (len(dna_list[index]))
        if percentage > highest_percent:
            highest_percent = percentage
            highest = index
    return(highest, highest_percent)

# Rose, Emmy, and Annika

def rna2codon(rna):
    genetic_code = {
        'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L',        'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',
        'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M',        'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',

        'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S',        'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
        'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',        'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',

        'UAU': 'Y', 'UAC': 'Y', 'UAA': '*', 'UAG': '*',        'CAU': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',
        'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',        'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',

        'UGU': 'C', 'UGC': 'C', 'UGA': '*', 'UGG': 'W',        'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
        'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',        'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',
    }
    codons = ''
    x = len(rna) % 4
    for index in range(0,len(rna)-x,3):
        key = rna[index:index+3]
        codons += genetic_code[key]
        if genetic_code[key] == '*':
            break
    codons = codons.replace("*",'')
    return codons
    
#Annika

def locate_substring(dna_snippet, dna):
    list= []
    x = (len(dna))%(len(dna_snippet))
    for i in range(len(dna)-x):
        if (dna[i:i+len(dna_snippet)] == dna_snippet):
            list.append(i)
    return list

#Annika

def hamming_dist(dna1,dna2):
    x = 0
    for i in range(len(dna1)):
        if (dna1[i] == dna2[i]):
            x += 1
            y = len(dna1) - x
    return y 

#Emmy

def count_dom_phenotype(genotypes):
    # total calculation 
    total = sum(genotypes)*2
    rec_ = 2*(genotypes[3]*.25 + genotypes[4]*0.5 + genotypes[5])
    domnum = total-rec_
    return domnum

# Aryan

def source_rna(protein):
    genetic_code = {
       'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L',        'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',
       'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M',        'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',

       'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S',        'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
       'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',        'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',

       'UAU': 'Y', 'UAC': 'Y', 'UAA': '*', 'UAG': '*',        'CAU': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',
       'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',        'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',

       'UGU': 'C', 'UGC': 'C', 'UGA': '*', 'UGG': 'W',        'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',
       'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',        'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',
   }
    master_count = 1

    for symbol in protein:
          count=0
          for check in genetic_code:
              if genetic_code[check] == symbol:
                  count = count + 1
          master_count = master_count * count
    
              
    master_count = master_count * 3
    return master_count
 
# Annika & Emmy

def splice_rna(dna, intron_list):
    for intron in intron_list:
        dna = dna.replace(intron, '')
    rna = dna2rna(dna)
    proteinstr = rna2codon(rna)
    stops = ['UAA','UAG','UGA'] #b/c not included in rna2codon()
    for stop in stops:
        if rna[(len(rna) - 3):] == stop:
            proteinstr += '*'
    return proteinstr
    
